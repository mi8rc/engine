name: Build and Test NURBS FPS Engine

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install system dependencies (headless CI/CD)
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang \
          valgrind \
          pkg-config \
          python3 \
          python3-pip
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        cd map_editor
        pip install -r requirements.txt
    
    - name: Build with GCC (Headless)
      if: matrix.compiler == 'gcc'
      run: |
        export CC=gcc
        make -f Makefile.headless clean
        make -f Makefile.headless headless
    
    - name: Build with Clang (Headless)
      if: matrix.compiler == 'clang'
      run: |
        export CC=clang
        make -f Makefile.headless clean
        make -f Makefile.headless headless
    
    - name: Test NURBS mathematics (headless)
      run: |
        # Test NURBS mathematics without GPU
        make -f Makefile.headless test
    
    - name: Run CI/CD test suite
      run: |
        # Run comprehensive headless tests
        make -f Makefile.headless ci-test
    
    - name: Memory leak check (Debug builds only)
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc'
      run: |
        # Quick valgrind check on headless NURBS engine
        timeout 10s valgrind --leak-check=summary --error-exitcode=1 \
          ./bin/nurbs_headless_test || [ $? -eq 124 ]
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nurbs-fps-headless-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          bin/nurbs_headless_test
          sample_maps/
          map_editor/
          exported_*.json
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew update
        brew install glfw json-c pkg-config
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        cd map_editor
        pip install -r requirements.txt
    
    - name: Build
      run: |
        make clean
        make release
    
    - name: Test
      run: |
        # Test basic functionality
        timeout 5s ./bin/nurbs_fps_game sample_maps/demo_scene.map || [ $? -eq 124 ]
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nurbs-fps-macos
        path: |
          bin/nurbs_fps_game
          sample_maps/
          map_editor/
        retention-days: 30

  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-glfw
          mingw-w64-x86_64-json-c
          mingw-w64-x86_64-pkg-config
          make
    

    
    - name: Build with MSYS2
      shell: msys2 {0}
      run: |
        export PATH="/mingw64/bin:$PATH"
        make clean
        make release
    
   
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nurbs-fps-windows
        path: |
          bin/nurbs_fps_game.exe
          sample_maps/
          map_editor/
        retention-days: 30

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cppcheck \
          clang-format \
          clang-tidy \
          libglfw3-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libjson-c-dev
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python linting tools
      run: |
        pip install flake8 black pylint mypy
    
    - name: Check C code formatting
      run: |
        # Check if C code follows formatting style
        find src/ -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror
    
    - name: Run static analysis on C code
      run: |
        # Run cppcheck on source files
        cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem src/
    
    - name: Run Python linting
      run: |
        cd map_editor
        # Check Python code style
        flake8 --max-line-length=100 --ignore=E203,W503 nurbs_editor.py
        
        # Check Python types (ignore missing imports for optional dependencies)
        mypy nurbs_editor.py --ignore-missing-imports || true

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install documentation tools
      run: |
        pip install sphinx sphinx-rtd-theme breathe doxygen
    
    - name: Check README completeness
      run: |
        # Verify README has all required sections
        grep -q "## Features" README.md
        grep -q "## Installation" README.md
        grep -q "## Usage" README.md
        grep -q "NURBS" README.md
        echo "README.md validation passed"
    
    - name: Validate sample map
      run: |
        # Verify sample map is valid JSON
        python -c "
        import json
        with open('sample_maps/demo_scene.map', 'r') as f:
            data = json.load(f)
        assert 'objects' in data
        assert 'lights' in data
        print('Sample map validation passed')
        "

  performance-test:
    runs-on: ubuntu-latest
    needs: build-linux
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libglfw3-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libjson-c-dev \
          build-essential \
          time
    
    - name: Build optimized version
      run: |
        make clean
        CFLAGS="-O3 -march=native -DNDEBUG" make
    
    - name: Performance benchmark
      run: |
        # Run game for a few seconds and measure performance
        echo "Running performance test..."
        timeout 3s /usr/bin/time -v ./bin/nurbs_fps_game sample_maps/demo_scene.map || [ $? -eq 124 ]
        echo "Performance test completed"

  release:
    if: github.event_name == 'release'
    needs: [build-linux, build-macos, build-windows, code-quality]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create release archives
      run: |
        # Create compressed archives for each platform
        tar -czf nurbs-fps-linux.tar.gz nurbs-fps-linux-*
        tar -czf nurbs-fps-macos.tar.gz nurbs-fps-macos
        zip -r nurbs-fps-windows.zip nurbs-fps-windows
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./nurbs-fps-linux.tar.gz
        asset_name: nurbs-fps-linux.tar.gz
        asset_content_type: application/gzip

  container-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t nurbs-fps-engine .
    
    - name: Test Docker container
      run: |
        # Test that container builds successfully
        docker run --rm nurbs-fps-engine echo "Container test passed"
